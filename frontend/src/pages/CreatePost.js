import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Container,
  TextField,
  Button,
  Box,
  Typography,
  CircularProgress,
  Alert,
} from '@mui/material';
import axios from 'axios';

function CreatePost() {
  const navigate = useNavigate();
  const [post, setPost] = useState({ body: '' });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [aiGenerating, setAiGenerating] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      console.log('Submitting post:', post);
      const response = await axios.post('http://localhost:8080/posts', {
        body: post.body
      });
      console.log('Post created successfully:', response.data);
      
      // Navigate with proper state to trigger refresh
      navigate('/', { state: { newPostCreated: true } });
    } catch (error) {
      console.error('Error creating post:', error.response || error);
      setError(error.response?.data || 'Error creating post. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const generateAIContent = async () => {
    setAiGenerating(true);
    try {
      // Here you would integrate with an AI service like OpenAI
      // For now, we'll simulate it with a timeout
      await new Promise(resolve => setTimeout(resolve, 2000));
      const aiGeneratedContent = "This is a sample AI-generated content. In a real implementation, this would be generated by an AI service like OpenAI's GPT model.";
      setPost({ body: aiGeneratedContent });
    } catch (error) {
      setError('Error generating AI content. Please try again.');
      console.error('Error generating AI content:', error);
    } finally {
      setAiGenerating(false);
    }
  };

  return (
    <Container maxWidth="md" sx={{ mt: 4 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        Create New Post
      </Typography>
      {error && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
      )}
      <Box component="form" onSubmit={handleSubmit}>
        <TextField
          fullWidth
          multiline
          rows={6}
          label="Post Content"
          value={post.body}
          onChange={(e) => setPost({ body: e.target.value })}
          margin="normal"
          required
        />
        <Box sx={{ mt: 2, display: 'flex', gap: 2 }}>
          <Button
            type="submit"
            variant="contained"
            color="primary"
            disabled={loading}
          >
            {loading ? <CircularProgress size={24} /> : 'Create Post'}
          </Button>
          <Button
            variant="outlined"
            color="secondary"
            onClick={generateAIContent}
            disabled={aiGenerating}
          >
            {aiGenerating ? (
              <>
                <CircularProgress size={24} sx={{ mr: 1 }} />
                Generating...
              </>
            ) : (
              'Generate with AI'
            )}
          </Button>
        </Box>
      </Box>
    </Container>
  );
}

export default CreatePost;